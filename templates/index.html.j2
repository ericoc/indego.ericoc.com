<!DOCTYPE html>
<html lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <meta name="author" content="Eric O'Callaghan">
        <meta name="description" content="Charts of available bicycles and docks for Philadelphia Indego bicycle-share stations.">
        <meta name="keywords" content="ericoc, indego, philadelphia, philly, bikes, bikeshare, bicycles, charts, graphs">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta property="og:type" content="website">
        <meta property="og:site_name" content="indego.ericoc.com">
        <meta property="og:title" content="indego.ericoc.com">
        <meta property="og:description" content="Charts of available bicycles and docks for Philadelphia Indego bicycle-share stations.">
        <meta property="og:url" content="{{ url_for('index', _external=True) }}">
        <meta property="og:image" content="{{ url_for('static', filename='icon.png', _external=True) }}">
        <link href="{{ url_for('static', filename='style.css') }}" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="">
        <link rel="shortcut icon" href="{{ url_for('static', filename='icon.png') }}">
        <link rel="apple-touch-icon" href="{{ url_for('static', filename='icon.png') }}">
        <title>PHL / Indego stations</title>
    {%- if stations %}
        <script id="stations" type="application/json">{{ stations | tojson }}</script>
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    {%- endif %}
    </head>
    <body>
        <div id="left-box">
            <h1 title="Philadelphia Indego Bicycles">
                <a id="logo" href="{{ url_for('index') }}">üö≤</a>
            </h1>
            <div id="totals">
                <h2 id="available-stations"></h2>
                <h3 id="bikes-available"></h3>
                <h3 id="docks-available"></h3>
            </div>
            <div id="search" title="Search">
                <button onclick="findMe();" title="My Location">üìç</button>
                <form method="post" action="{{ url_for('search_form') }}">
                    <input type="text" id="indego-search" name="indego-search">
                    <label for="indego-search">
                        <i>
                            (i.e. "<a href="{{ url_for('search_stations', search='Broad') }}">Broad</a>",
                            "<a href="{{ url_for('search_stations', search='19107') }}">19107</a>",
                            or "<a href="{{ url_for('search_stations', search='Market' )}}">Market</a>")
                        </i>
                    </label>
                    <input type="submit" value="Search!">
                </form>
            </div>
    {%- with messages = get_flashed_messages(with_categories=True) %}
        {%- if messages %}
            <div id="messages" title="Messages">
                <ul id="flashes">
            {%- for category, message in messages %}
                    <li class="flash-{{ category }}">
                        {{ message }}
                    </li>
            {%- endfor %}
                </ul>
            </div>
        {%- endif %}
    {%- endwith %}
    {%- if stations %}
            <div id="map-canvas"></div>
    {%- endif %}
    {%- if added_web and added_since %}
            <p id="added">
                <code title="As of: {{ added_web.strftime('%a, %d %b %Y @ %I:%M:%S %p %Z') }} ({{ added_since }} ago)">
                    as of: {{ added_web.strftime('%a, %d %b %Y @ %I:%M:%S %p %Z') }} ({{ added_since }} ago)
                </code>
            </p>
    {%- endif %}
        </div>
        <div id="right-box">
    {%- if stations %}
            <div id="station-list" title="Stations">
                <ol id="station-list-items">
                </ol>
            </div>
            <script>

                // Create function to mark users current GPS location
                function findMe() {
                    function success(pos) {
                        const crd = pos.coords;
                        const userPos = [crd.latitude, crd.longitude];

                        // Create map marker for users location, and fly to it
                        L.marker(userPos).addTo(map).bindPopup(
                            'Your Location'
                        ).openPopup();
                        map.flyTo(userPos, 18);
                    };
                    function error(err) { console.warn(err.code, err.message); };
                    const options = {
                        timeout: 10000,
                        maximumAge: 30000,
                        enableHighAccuracy: true
                    };
                    navigator.geolocation.getCurrentPosition(
                        success, error, options
                    );
                };

                // Start with empty markers, latitudes, longitudes, and stations
                const markers = [];
                const latitudes = [];
                const longitudes = [];
                const stations = [];

                // Parse and count station JSON objects
                const stationsId = document.getElementById('stations');
                const stationData = JSON.parse(stationsId.textContent);
                const stationCount = stationData.length;

                // Begin counting total availability
                let availableStations = stationCount;
                let totalBikesAvailable = 0;
                let totalClassicBikesAvailable = 0;
                let totalDocksAvailable = 0;
                let totalElectricAvailable = 0;
                let unavailableStations = 0;

                // Create a function to return the contexts of a marker popup
                function popText(kioskId) {

                    const station = stations[kioskId];
                    const stationName = station['name'];
                    const popNode = document.createElement('div');

                    // Create <h4> for station name and perma-link
                    const headerNode = document.createElement('h4');

                    // Link station name
                    const stationLinkNode = document.createElement('a');
                    stationLinkNode.href = '#' + kioskId;
                    stationLinkNode.title = stationName;
                    stationLinkNode.appendChild(
                        document.createTextNode(stationName)
                    );

                    // Station perma-link
                    const permaLinkNode = document.createElement('a');
                    permaLinkNode.href = '/search/' + kioskId + '#' + kioskId;
                    permaLinkNode.title = stationName;
                    permaLinkNode.appendChild(
                        document.createTextNode('üîó')
                    );
                    headerNode.appendChild(stationLinkNode);
                    headerNode.appendChild(document.createTextNode(' '));
                    headerNode.appendChild(permaLinkNode);
                    popNode.appendChild(headerNode);

                    // Link station graph to historical chart, in marker popup
                    const stationGraphNode = document.createElement('a');
                    stationGraphNode.href = '#' + kioskId;
                    stationGraphNode.onclick = function () {
                        window.open(
                            '/chart/' + kioskId + '/',
                            'popup','height=500,width=800'
                        );
                        return false;
                    };
                    stationGraphNode.appendChild(graphStation(kioskId));
                    popNode.appendChild(stationGraphNode);

                    // Include count of bicycles on marker popups
                    const bikeCountNode = document.createElement('div');
                    let bikeCountText = station["bikesAvailable"] + ' bicycles';
                    bikeCountText += ', ' + station["classicBikesAvailable"] + ' classic';
                    bikeCountText += ', ' + station["electricBikesAvailable"] + ' electric';
                    bikeCountNode.appendChild(
                        document.createTextNode(bikeCountText)
                    );
                    popNode.appendChild(bikeCountNode);

                    // Include dock count on marker popups
                    const dockCountNode = document.createElement('div');
                    const dockCountText = document.createTextNode(
                        station["docksAvailable"] + ' docks'
                    );
                    dockCountNode.appendChild(dockCountText);
                    popNode.appendChild(dockCountNode);

                    // Gather address text
                    const addressNode = document.createElement('span');
                    addressNode.appendChild(
                        document.createTextNode(station['addressStreet'])
                    )
                    addressNode.appendChild(document.createElement('br'));
                    addressNode.appendChild(
                        document.createTextNode(
                            station['addressCity'] + ', ' +
                            station['addressState'] + ' ' +
                            station['addressZipCode']
                        )
                    );

                    // Link address text
                    const addressUrl = 'https://www.google.com/maps/search/?api=1&query=' + station["latitude"] + ',' + station["longitude"];
                    const addressLinkNode = document.createElement('a');
                    addressLinkNode.href = addressUrl;
                    addressLinkNode.target = '_blank';
                    addressLinkNode.appendChild(addressNode);
                    popNode.appendChild(addressLinkNode);

                    // Return the marker popup contents
                    return popNode;
                };

                // Create a function to return a text "graph" of a station
                function graphStation (kioskId) {

                    // Set the graph character, and get the station details
                    const character = '‚ñà';
                    const station = stations[kioskId];

                    // Create a "graph" div to fill in
                    const divGraphNode = document.createElement('div');
                    divGraphNode.className = 'station-graph';

                    // Classic graph
                    const classicNode = document.createElement('span');
                    const classicCount = station['classicBikesAvailable'];
                    classicNode.className = 'bikes';
                    classicNode.title = classicCount + ' classic bikes';
                    for (let c = 0; c < classicCount; c++) {
                        classicNode.innerText += character;
                    };
                    divGraphNode.appendChild(classicNode);

                    // Electric graph
                    const electricCount = station['electricBikesAvailable'];
                    const electricNode = document.createElement('span');
                    electricNode.className = 'electric';
                    electricNode.title = electricCount + ' electric bikes';
                    for (let e = 0; e < electricCount; e++) {
                        electricNode.innerText += character;
                    };
                    divGraphNode.appendChild(electricNode);

                    // Dock graph
                    const dockCount = station['docksAvailable'];
                    const dockNode = document.createElement('span');
                    dockNode.className = 'docks';
                    dockNode.title = dockCount + ' docks';
                    for (let d = 0; d < dockCount; d++) {
                        dockNode.innerText += character;
                    };
                    divGraphNode.appendChild(dockNode);

                    // Return the "graph" div
                    return divGraphNode;
                };

                // Create Leaflet map
                const map = L.map('map-canvas');
                L.tileLayer(
                    'https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; OpenStreetMap'
                    }
                ).addTo(map);

                // Loop through each station
                for (const station of stationData) {

                    // Get station kiosk ID, name, and status
                    const kioskId = station['kioskId'];
                    stations[kioskId] = station;
                    const stationName = station['name'];
                    const stationStatus = station['kioskPublicStatus'];

                    // Keep track of totals
                    totalBikesAvailable += station['bikesAvailable'];
                    totalClassicBikesAvailable += station['classicBikesAvailable'];
                    totalElectricAvailable += station['electricBikesAvailable'];
                    totalDocksAvailable += station['docksAvailable'];

                    // Keep track of coordinates, for final bounds min/max
                    const latitude = Number(station['latitude']);
                    const longitude = Number(station['longitude']);
                    latitudes.push(latitude);
                    longitudes.push(longitude);
                    // Finish creating marker popup contents

                    // Start list of each station
                    const listNode = document.createElement('li');
                    listNode.id = kioskId;
                    listNode.value = kioskId;

                    // Unavailable stations have special CSS, and popup line
                    const popUp = popText(kioskId);
                    if (stationStatus !== 'Active') {
                        availableStations -= 1;
                        unavailableStations += 1;
                        listNode.className = 'unavailable';
                        const unavailableDiv = document.createElement('div');
                        unavailableDiv.className = 'unavailable';
                        unavailableDiv.appendChild(
                            document.createTextNode(stationStatus)
                        );
                        popUp.appendChild(unavailableDiv);
                    };

                    // Create map marker for each station
                    markers[kioskId] = L.marker(
                        [station['latitude'], station['longitude']]
                    ).addTo(map).bindPopup(popUp).openPopup();

                    // Link each map marker on the side of the page
                    const linkNode = document.createElement('a');
                    linkNode.appendChild(
                        document.createTextNode(stationName)
                    );
                    linkNode.className = 'station-link';
                    linkNode.href = '#' + kioskId;
                    linkNode.onclick = function() {
                        markers[kioskId].openPopup();
                    };
                    linkNode.title = stationName;
                    linkNode.appendChild(graphStation(kioskId));
                    listNode.appendChild(linkNode);

                    document.getElementById(
                        'station-list-items'
                    ).appendChild(listNode);
                };

                // Fill in totals at top of the page
                const totalStationText = availableStations + ' / ' + stationCount + ' stations available';
                document.getElementById('available-stations').innerText = totalStationText;

                let totalBikeText = totalBikesAvailable + ' bicycles, ';
                totalBikeText += totalClassicBikesAvailable + ' classic, ';
                totalBikeText += totalElectricAvailable + ' electric';
                document.getElementById('bikes-available').innerText = totalBikeText;

                const totalDockText = totalDocksAvailable + ' docks available';
                document.getElementById('docks-available').innerText = totalDockText;

                // Set map bounds using min/max coordinates
                map.fitBounds(
                    [
                        [Math.min(...latitudes), Math.min(...longitudes)],
                        [Math.max(...latitudes), Math.max(...longitudes)]
                    ]
                );

                // Open popup for marker if referenced by URL anchor
                if (window.location.hash.substr(1)) {
                    const anchor = window.location.hash.substr(1);
                    if (markers[anchor]) {
                        markers[anchor].openPopup();
                    };
                };

                // Open popup if single marker
                if (stationCount === 1) {
                    markers[Object.keys(markers)[0]].openPopup();
                };

            </script>
    {%- endif %}
            <p>
                <code>
                    <a href="https://github.com/ericoc/indego.ericoc.com" target="_blank">https://github.com/ericoc/indego.ericoc.com</a>
                </code>
            </p>
        </div>
    </body>
</html>
